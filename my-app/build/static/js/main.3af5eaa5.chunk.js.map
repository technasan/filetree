{"version":3,"sources":["FileContext.js","TextField.js","Tree.js","App.js","index.js"],"names":["FileContext","createContext","TextArea","Input","TextField","filedata","setFiledata","useContext","React","createElement","rows","placeholder","className","value","text","onInput","e","key","target","TreeNode","Tree","expandedKeyArr","TreeFiles","_ref","appData","gData","setGData","useState","expandedKeys","setExpandedKeys","newtree","changeFileText","arrayData","map","item","i","children","title","puretitle","localStorage","setItem","JSON","stringify","renderTreeNodes","data","isEditable","onChange","CloseOutlined","style","marginLeft","onClick","onClose","defaultValue","CheckOutlined","onSave","EditOutlined","onEdit","PlusOutlined","onAdd","parentKey","MinusOutlined","onDelete","isFolder","dataRef","editNode","slice","forEach","indexOf","push","addNode","nanoid","changeNode","saveNode","closeNode","deleteNode","index","splice","defaultExpandedKeys","draggable","showIcon","blockNode","onDragEnter","info","onDrop","console","log","dropKey","node","dragKey","dragNode","dropPos","pos","split","dropPosition","Number","length","loop","callback","dragObj","arr","dropToGap","props","expanded","unshift","ar","_item","cleareddata","clearIconsType","onSelect","onExpand","Title","Typography","App","levelData","array","_level","_preKey","preKey","level","concat","treefiles","getItem","parse","Row","gutter","Provider","Col","span","Flex","vertical","justify","offset","ReactDOM","createRoot","document","getElementById","render","StrictMode","appHello","fetch","process","then","r","json","catch","error"],"mappings":"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","file":"static/js/main.3af5eaa5.chunk.js","sourcesContent":["import { createContext } from 'react'\r\nexport const FileContext = createContext()\r\n","import React, { useContext } from 'react'\r\nimport { FileContext } from './FileContext.js'\r\n\r\nimport './App.css'\r\nimport { Input } from 'antd'\r\n\r\nconst { TextArea } = Input\r\n\r\nfunction TextField() {\r\n\tconst { filedata, setFiledata } = useContext(FileContext)\r\n\tconst onHandleInput = e => {\r\n\t\tsetFiledata({ key: filedata.key, text: e.target.value })\r\n\t}\r\n\r\n\treturn (\r\n\t\t<TextArea\r\n\t\t\trows={8}\r\n\t\t\tplaceholder='Сделайте новую заметку'\r\n\t\t\tclassName='text-field'\r\n\t\t\tvalue={filedata.text}\r\n\t\t\tonInput={onHandleInput}\r\n\t\t></TextArea>\r\n\t)\r\n}\r\nexport default TextField\r\n","import React, { useState, useContext } from 'react'\r\nimport { FileContext } from './FileContext.js'\r\nimport { Tree } from 'antd'\r\nimport { nanoid } from 'nanoid'\r\nimport { EditOutlined, PlusOutlined, MinusOutlined, CloseOutlined, CheckOutlined } from '@ant-design/icons'\r\n\r\nconst { TreeNode } = Tree\r\nconst expandedKeyArr = ['0']\r\nfunction TreeFiles({ appData }) {\r\n\tconst [gData, setGData] = useState(appData)\r\n\tconst [expandedKeys, setExpandedKeys] = useState(expandedKeyArr) // const [expandedKeys] = useState(['0-1'])\r\n\r\n\t// Редактирование файла\r\n\tconst { filedata, setFiledata } = useContext(FileContext)\r\n\r\n\t// Заменить текст выбранного файла при вводе в TextField\r\n\tfunction changeFileText(key, arrayData) {\r\n\t\tconst newtree = arrayData.map((item, i) => {\r\n\t\t\tif (item.children) {\r\n\t\t\t\titem.children = changeFileText(key, item.children)\r\n\t\t\t}\r\n\t\t\tif (item.key === key) {\r\n\t\t\t\t// заменить найденный текст\r\n\t\t\t\titem.title = item.puretitle // фикс ошибки TypeError в title\r\n\t\t\t\titem.text = filedata.text\r\n\t\t\t\treturn item\r\n\t\t\t} else {\r\n\t\t\t\titem.title = item.puretitle // фикс ошибки TypeError в title\r\n\t\t\t\t// остальные не меняем, возвращаем как есть\r\n\t\t\t\treturn item\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn newtree\r\n\t}\r\n\r\n\tif (filedata.key != null) {\r\n\t\tconst newtree = changeFileText(filedata.key, gData)\r\n\t\t// console.log('[newtree]', newtree)\r\n\t\tlocalStorage.setItem('mytreedata', JSON.stringify(newtree))\r\n\t}\r\n\r\n\tconst onSelect = (i, e) => {\r\n\t\tsetFiledata({ key: e.node.key, text: e.node.text })\r\n\t}\r\n\r\n\t// Фикс ошибки TypeError в title при конвертации в JSON.\r\n\t// В localStorage нельзя хранить компоненты иконок, поэтому перед записью надо очистить title.\r\n\t// Изначальное название 'файла' хранится в pretitle\r\n\tfunction clearIconsType(arrayData) {\r\n\t\tconst newtree = arrayData.map((item, i) => {\r\n\t\t\tif (item.children) {\r\n\t\t\t\titem.children = clearIconsType(item.children)\r\n\t\t\t}\r\n\t\t\titem.title = item.puretitle\r\n\t\t\treturn item\r\n\t\t})\r\n\t\treturn newtree\r\n\t}\r\n\r\n\t// Функции для перетаскивания\r\n\tconst onDragEnter = info => {\r\n\t\tsetExpandedKeys(info.expandedKeys)\r\n\t}\r\n\tconst onDrop = info => {\r\n\t\tconsole.log('[info onDrop]', info)\r\n\t\tconst dropKey = info.node.key\r\n\t\tconst dragKey = info.dragNode.key\r\n\t\tconst dropPos = info.node.pos.split('-')\r\n\t\tconst dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1])\r\n\t\tconst loop = (data, key, callback) => {\r\n\t\t\tfor (let i = 0; i < data.length; i++) {\r\n\t\t\t\tif (data[i].key === key) {\r\n\t\t\t\t\treturn callback(data[i], i, data)\r\n\t\t\t\t}\r\n\t\t\t\tif (data[i].children) {\r\n\t\t\t\t\tloop(data[i].children, key, callback)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst data = [...gData]\r\n\r\n\t\t// Find dragObject\r\n\t\tlet dragObj\r\n\t\tloop(data, dragKey, (item, index, arr) => {\r\n\t\t\tarr.splice(index, 1)\r\n\t\t\tdragObj = item\r\n\t\t})\r\n\t\tif (!info.dropToGap) {\r\n\t\t\t// Drop on the content\r\n\t\t\tloop(data, dropKey, item => {\r\n\t\t\t\titem.children = item.children || []\r\n\t\t\t\t// where to insert. New item was inserted to the start of the array in this example, but can be anywhere\r\n\t\t\t\titem.children.unshift(dragObj)\r\n\t\t\t})\r\n\t\t} else if (\r\n\t\t\t(info.node.props.children || []).length > 0 &&\r\n\t\t\t// Has children\r\n\t\t\tinfo.node.props.expanded &&\r\n\t\t\t// Is expanded\r\n\t\t\tdropPosition === 1 // On the bottom gap\r\n\t\t) {\r\n\t\t\tloop(data, dropKey, item => {\r\n\t\t\t\titem.children = item.children || []\r\n\t\t\t\t// where to insert. New item was inserted to the start of the array in this example, but can be anywhere\r\n\t\t\t\titem.children.unshift(dragObj)\r\n\t\t\t\t// in previous version, we use item.children.push(dragObj) to insert the\r\n\t\t\t\t// item to the tail of the children\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tlet ar = []\r\n\t\t\tlet i\r\n\t\t\tloop(data, dropKey, (_item, index, arr) => {\r\n\t\t\t\tar = arr\r\n\t\t\t\ti = index\r\n\t\t\t})\r\n\t\t\tif (dropPosition === -1) {\r\n\t\t\t\tar.splice(i, 0, dragObj)\r\n\t\t\t} else {\r\n\t\t\t\tar.splice(i + 1, 0, dragObj)\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetGData(data)\r\n\r\n\t\tconst cleareddata = clearIconsType(data)\r\n\t\tlocalStorage.setItem('mytreedata', JSON.stringify(cleareddata))\r\n\r\n\t\tsetFiledata({ key: null, text: '' }) // очистить поле редактирования TextField\r\n\t}\r\n\r\n\t// Модификация для удаления-добавления нод\r\n\tconst onExpand = expandedKeys => {\r\n\t\tsetExpandedKeys(expandedKeys)\r\n\t}\r\n\r\n\tconst renderTreeNodes = data => {\r\n\t\tlet nodeArr = data.map(item => {\r\n\t\t\tif (item.isEditable) {\r\n\t\t\t\titem.title = (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input value={item.value || ''} onChange={e => onChange(e, item.key)} />\r\n\r\n\t\t\t\t\t\t<CloseOutlined style={{ marginLeft: 10 }} onClick={() => onClose(item.key, item.defaultValue)} />\r\n\r\n\t\t\t\t\t\t<CheckOutlined style={{ marginLeft: 10 }} onClick={() => onSave(item.key)} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t} else {\r\n\t\t\t\titem.title = (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<span>{item.puretitle}</span>\r\n\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t<EditOutlined style={{ marginLeft: 10 }} onClick={() => onEdit(item.key)} />\r\n\r\n\t\t\t\t\t\t\t<PlusOutlined style={{ marginLeft: 10 }} onClick={() => onAdd(item.key)} />\r\n\t\t\t\t\t\t\t{item.parentKey === '0' ? null : (\r\n\t\t\t\t\t\t\t\t<MinusOutlined style={{ marginLeft: 10 }} onClick={() => onDelete(item.key)} />\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\tif (item.children) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<TreeNode\r\n\t\t\t\t\t\ttitle={item.title}\r\n\t\t\t\t\t\tkey={item.key}\r\n\t\t\t\t\t\ttext={item.text}\r\n\t\t\t\t\t\tpuretitle={item.puretitle}\r\n\t\t\t\t\t\tisFolder={item.isFolder}\r\n\t\t\t\t\t\tdefaultValue={item.defaultValue}\r\n\t\t\t\t\t\tdataRef={item}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{renderTreeNodes(item.children)}\r\n\t\t\t\t\t</TreeNode>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\treturn (\r\n\t\t\t\t<TreeNode\r\n\t\t\t\t\ttitle={item.title}\r\n\t\t\t\t\tkey={item.key}\r\n\t\t\t\t\ttext={item.text}\r\n\t\t\t\t\tpuretitle={item.puretitle}\r\n\t\t\t\t\tisFolder={item.isFolder}\r\n\t\t\t\t\tdefaultValue={item.defaultValue}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t})\r\n\t\treturn nodeArr\r\n\t}\r\n\r\n\tconst onEdit = key => {\r\n\t\teditNode(key, gData)\r\n\t\tsetGData(gData.slice())\r\n\t}\r\n\r\n\tconst editNode = (key, data) =>\r\n\t\tdata.forEach(item => {\r\n\t\t\tif (item.key === key) {\r\n\t\t\t\titem.isEditable = true\r\n\t\t\t} else {\r\n\t\t\t\titem.isEditable = false\r\n\t\t\t}\r\n\t\t\titem.title = item.defaultValue\r\n\t\t\tif (item.children) {\r\n\t\t\t\teditNode(key, item.children)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\tconst onAdd = key => {\r\n\t\tif (expandedKeys.indexOf(key) === -1) {\r\n\t\t\texpandedKeyArr.push(key)\r\n\t\t}\r\n\t\tsetExpandedKeys(expandedKeyArr.slice())\r\n\t\taddNode(key, gData)\r\n\t\tsetGData(gData.slice())\r\n\t}\r\n\r\n\tconst addNode = (key, data) =>\r\n\t\tdata.forEach(item => {\r\n\t\t\tif (item.key === key) {\r\n\t\t\t\tif (item.children) {\r\n\t\t\t\t\titem.children.push({\r\n\t\t\t\t\t\tpuretitle: 'default',\r\n\t\t\t\t\t\ttitle: 'default',\r\n\t\t\t\t\t\ttext: '',\r\n\t\t\t\t\t\tisFolder: false,\r\n\t\t\t\t\t\tkey: nanoid(), // этот ключ должен быть единственным\r\n\t\t\t\t\t})\r\n\t\t\t\t} else {\r\n\t\t\t\t\titem.children = []\r\n\t\t\t\t\titem.children.push({\r\n\t\t\t\t\t\tpuretitle: 'default',\r\n\t\t\t\t\t\ttitle: 'default',\r\n\t\t\t\t\t\ttext: '',\r\n\t\t\t\t\t\tisFolder: false,\r\n\t\t\t\t\t\tkey: nanoid(),\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tif (item.children) {\r\n\t\t\t\taddNode(key, item.children)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\tconst onChange = (e, key) => {\r\n\t\tchangeNode(key, e.target.value, gData)\r\n\t\tsetGData(gData.slice())\r\n\t}\r\n\r\n\tconst changeNode = (key, value, data) =>\r\n\t\tdata.forEach(item => {\r\n\t\t\tif (item.key === key) {\r\n\t\t\t\titem.value = value\r\n\t\t\t\titem.puretitle = value\r\n\t\t\t}\r\n\t\t\tif (item.children) {\r\n\t\t\t\tchangeNode(key, value, item.children)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\tconst onSave = key => {\r\n\t\tsaveNode(key, gData)\r\n\t\tsetGData(gData.slice())\r\n\t}\r\n\r\n\tconst saveNode = (key, data) =>\r\n\t\tdata.forEach(item => {\r\n\t\t\tif (item.key === key) {\r\n\t\t\t\titem.defaultValue = item.puretitle\r\n\t\t\t}\r\n\t\t\tif (item.children) {\r\n\t\t\t\tsaveNode(key, item.children)\r\n\t\t\t}\r\n\t\t\titem.isEditable = false\r\n\t\t})\r\n\r\n\tconst onClose = (key, defaultValue) => {\r\n\t\tsetFiledata({ key: null, text: '' }) // очистить поле редактирования TextField\r\n\t\tcloseNode(key, defaultValue, gData)\r\n\t\tsetGData(gData)\r\n\t}\r\n\r\n\tconst closeNode = (key, defaultValue, data) =>\r\n\t\tdata.forEach(item => {\r\n\t\t\titem.isEditable = false\r\n\t\t\tif (item.key === key) {\r\n\t\t\t\titem.puretitle = defaultValue\r\n\t\t\t}\r\n\t\t\tif (item.children) {\r\n\t\t\t\tcloseNode(key, defaultValue, item.children)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\tconst onDelete = key => {\r\n\t\tsetFiledata({ key: null, text: '' }) // очистить поле редактирования TextField\r\n\t\tdeleteNode(key, gData)\r\n\r\n\t\tsetGData(gData.slice())\r\n\t}\r\n\r\n\tconst deleteNode = (key, data) =>\r\n\t\tdata.forEach((item, index) => {\r\n\t\t\tif (item.key === key) {\r\n\t\t\t\tdata.splice(index, 1)\r\n\t\t\t\treturn\r\n\t\t\t} else {\r\n\t\t\t\tif (item.children) {\r\n\t\t\t\t\tdeleteNode(key, item.children)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\treturn (\r\n\t\t<Tree\r\n\t\t\tclassName='draggable-tree'\r\n\t\t\tdefaultExpandedKeys={expandedKeys}\r\n\t\t\tdraggable\r\n\t\t\tshowIcon\r\n\t\t\tblockNode\r\n\t\t\tonDragEnter={onDragEnter}\r\n\t\t\tonDrop={onDrop}\r\n\t\t\tonSelect={onSelect}\r\n\t\t\texpandedKeys={expandedKeys}\r\n\t\t\tonExpand={onExpand}\r\n\t\t>\r\n\t\t\t{renderTreeNodes(gData)}\r\n\t\t</Tree>\r\n\t)\r\n}\r\nexport default TreeFiles\r\n","import React, { useState } from 'react'\nimport './App.css'\nimport { Row, Col, Flex, Typography } from 'antd'\nimport { FileContext } from './FileContext.js' // контекст для хранения текста редактируемого файла\n\nimport TextField from './TextField'\nimport TreeFiles from './Tree'\n\nconst { Title } = Typography\n\nfunction App({ appData }) {\n\t// стартовые значения для хранения текста редактируемого файла\n\tconst initfile = {\n\t\tkey: null,\n\t\ttext: '',\n\t}\n\t// Текст и key открытого в поле редактирования файла\n\tconst [filedata, setFiledata] = useState(initfile)\n\n\t// Функция добавления ключей для отображения дерева - при первом проходе\n\tconst levelData = (array, _level, _preKey) => {\n\t\tconst preKey = _preKey || '0'\n\t\tconst level = _level || '0'\n\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\tconst key = `${preKey}-${i}`\n\t\t\tarray[i].key = key\n\t\t\tarray[i].defaultValue = key\n\t\t\tarray[i].isEditable = false\n\t\t\tarray[i].puretitle = array[i].title\n\t\t\tif (array[i].children.length > 0) {\n\t\t\t\tlevelData(array[i].children, level + 1, key)\n\t\t\t}\n\t\t}\n\t\treturn array\n\t}\n\n\t// Проверяем, есть ли структура файлов в localstorage. Если да - берем данные оттуда,\n\t// нет - добавляем keys для дерева и сразу записываем в localstorage.\n\tconst treefiles = localStorage.getItem('mytreedata') == null ? levelData(appData) : JSON.parse(appData)\n\tif (localStorage.getItem('mytreedata') == null) {\n\t\tlocalStorage.setItem('mytreedata', JSON.stringify(treefiles))\n\t}\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Title className='heading'>The File Tree App</Title>\n\t\t\t<div className='block-bg'>\n\t\t\t\t<Row gutter={8}>\n\t\t\t\t\t<FileContext.Provider value={{ filedata, setFiledata }}>\n\t\t\t\t\t\t<Col span={10}>\n\t\t\t\t\t\t\t<Flex vertical='true' justify='space-between'>\n\t\t\t\t\t\t\t\t<div className='h-tree'>\n\t\t\t\t\t\t\t\t\t<TreeFiles appData={treefiles} filedata={filedata} className='text-field' />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Flex>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col span={14} offset={0}>\n\t\t\t\t\t\t\t<TextField />\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</FileContext.Provider>\n\t\t\t\t</Row>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\nexport default App\n\n// {getIcon('folder_opened')} {getIcon('arrow_side')} {getIcon('arrow_side')} {getIcon('folder_opened')} {getIcon('file')}\n// <Controls />\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\n\n// Проверяем, есть ли структура дерева в localstorage\nif (localStorage.getItem('mytreedata')) {\n\tconst root = ReactDOM.createRoot(document.getElementById('root'))\n\troot.render(\n\t\t<React.StrictMode>\n\t\t\t<App appData={localStorage.getItem('mytreedata')} appHello='Hello Old FileTree' />\n\t\t</React.StrictMode>\n\t)\n} else {\n\t// если в localstorage пусто, запрашиваем начальные данные\n\tfetch(`${process.env.PUBLIC_URL}/initial.json`)\n\t\t.then(r => r.json())\n\t\t.then(data => {\n\t\t\tconst root = ReactDOM.createRoot(document.getElementById('root'))\n\t\t\troot.render(\n\t\t\t\t<React.StrictMode>\n\t\t\t\t\t<App appData={data} appHello='Hello New FileTree' />\n\t\t\t\t</React.StrictMode>\n\t\t\t)\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.log('[error reading file]', error)\n\t\t})\n}\n"],"sourceRoot":""}