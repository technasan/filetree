{"version":3,"sources":["helpers.js","FileContext.js","TextField.js","Controls.js","Tree.js","App.js","index.js"],"names":["FileContext","createContext","TextArea","Input","TextField","textval","setTextVal","useState","filedata","setFiledata","useContext","React","createElement","rows","placeholder","className","value","text","onInput","e","console","log","target","key","Controls","Space","id","Button","type","disabled","TreeFiles","_ref","appData","gData","setGData","expandedKeys","newtree","changeFileText","arrayData","map","item","i","children","Tree","defaultExpandedKeys","draggable","blockNode","onDragEnter","info","onDrop","dropKey","node","dragKey","dragNode","dropPos","pos","split","dropPosition","Number","length","loop","data","callback","dragObj","index","arr","splice","dropToGap","props","expanded","unshift","ar","_item","onSelect","treeData","Title","Typography","App","oldTree","levelData","array","_level","_preKey","preKey","level","concat","treefiles","JSON","parse","localStorage","setItem","stringify","treedata","setTreeData","Row","gutter","Col","span","offset","Provider","Flex","vertical","justify","getItem","ReactDOM","createRoot","document","getElementById","render","StrictMode","appHello","fetch","process","then","r","json","catch","error"],"mappings":"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","file":"static/js/main.86c7302a.chunk.js","sourcesContent":["import React from 'react'\r\nimport {\r\n\tCloseCircleOutlined,\r\n\tFileTextOutlined,\r\n\tFileAddOutlined,\r\n\tFolderOutlined,\r\n\tFolderOpenOutlined,\r\n\tFolderAddOutlined,\r\n\tRightOutlined,\r\n\tUpOutlined,\r\n} from '@ant-design/icons'\r\n\r\nexport const getIcon = type => {\r\n\tswitch (type) {\r\n\t\tcase 'folder':\r\n\t\t\treturn <FolderOutlined />\r\n\t\tcase 'folder_opened':\r\n\t\t\treturn <FolderOpenOutlined />\r\n\t\tcase 'addfolder':\r\n\t\t\treturn <FolderAddOutlined />\r\n\t\tcase 'addfile':\r\n\t\t\treturn <FileAddOutlined />\r\n\t\tcase 'file':\r\n\t\t\treturn <FileTextOutlined />\r\n\t\tcase 'delete':\r\n\t\t\treturn <CloseCircleOutlined style={{ fontSize: '16px', color: '#d25' }} />\r\n\t\tcase 'arrow_side':\r\n\t\t\treturn <RightOutlined />\r\n\t\tcase 'arrow_up':\r\n\t\t\treturn <UpOutlined />\r\n\t\tdefault:\r\n\t\t\treturn null\r\n\t}\r\n}\r\n","import React, { createContext } from 'react'\r\nexport const FileContext = createContext()\r\n","import React, { useContext, useState } from 'react'\r\nimport { FileContext } from './FileContext.js'\r\n\r\nimport './App.css'\r\nimport { Input } from 'antd'\r\n\r\nconst { TextArea } = Input\r\n\r\nfunction TextField() {\r\n\tconst [textval, setTextVal] = useState('')\r\n\t// const [currentkey, setCurrentKey] = useState('')\r\n\tconst { filedata, setFiledata } = useContext(FileContext)\r\n\r\n\tconst onHandleInput = e => {\r\n\t\tconsole.log('[TEXTFIELD onInput]', e.target.value, filedata)\r\n\t\tsetTextVal(e.target.value)\r\n\t\tsetFiledata({ key: filedata.key, text: e.target.value })\r\n\t}\r\n\r\n\treturn (\r\n\t\t<TextArea\r\n\t\t\trows={8}\r\n\t\t\tplaceholder='hello TextField'\r\n\t\t\tclassName='text-field'\r\n\t\t\tvalue={filedata.text}\r\n\t\t\tonInput={onHandleInput}\r\n\t\t></TextArea>\r\n\t)\r\n}\r\nexport default TextField\r\n","import React, { useState } from 'react'\r\nimport './App.css'\r\nimport { Button, Space } from 'antd'\r\n\r\nfunction Controls() {\r\n\treturn (\r\n\t\t<Space id='btnContainer'>\r\n\t\t\t<Button type='primary' className='button' disabled>\r\n\t\t\t\tНовый файл\r\n\t\t\t</Button>\r\n\t\t\t<Button type='primary' className='button' disabled>\r\n\t\t\t\tНовая папка\r\n\t\t\t</Button>\r\n\t\t</Space>\r\n\t)\r\n}\r\nexport default Controls\r\n","import React, { useState, useContext } from 'react'\r\nimport { FileContext } from './FileContext.js'\r\nimport { Tree } from 'antd'\r\n\r\nfunction TreeFiles({ appData }) {\r\n\tconst [gData, setGData] = useState(appData)\r\n\tconst [expandedKeys] = useState([]) // const [expandedKeys] = useState(['0-1'])\r\n\r\n\tconst onDragEnter = info => {\r\n\t\tconsole.log(info)\r\n\t\t// expandedKeys, set it when controlled is needed\r\n\t\t// setExpandedKeys(info.expandedKeys)\r\n\t}\r\n\r\n\tconst onDrop = info => {\r\n\t\tconsole.log('[info onDrop]', info)\r\n\t\tconst dropKey = info.node.key\r\n\t\tconst dragKey = info.dragNode.key\r\n\t\tconst dropPos = info.node.pos.split('-')\r\n\t\tconst dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1])\r\n\t\tconst loop = (data, key, callback) => {\r\n\t\t\tfor (let i = 0; i < data.length; i++) {\r\n\t\t\t\tif (data[i].key === key) {\r\n\t\t\t\t\treturn callback(data[i], i, data)\r\n\t\t\t\t}\r\n\t\t\t\tif (data[i].children) {\r\n\t\t\t\t\tloop(data[i].children, key, callback)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst data = [...gData]\r\n\r\n\t\t// Find dragObject\r\n\t\tlet dragObj\r\n\t\tloop(data, dragKey, (item, index, arr) => {\r\n\t\t\tarr.splice(index, 1)\r\n\t\t\tdragObj = item\r\n\t\t})\r\n\t\tif (!info.dropToGap) {\r\n\t\t\t// Drop on the content\r\n\t\t\tloop(data, dropKey, item => {\r\n\t\t\t\titem.children = item.children || []\r\n\t\t\t\t// where to insert. New item was inserted to the start of the array in this example, but can be anywhere\r\n\t\t\t\titem.children.unshift(dragObj)\r\n\t\t\t})\r\n\t\t} else if (\r\n\t\t\t(info.node.props.children || []).length > 0 &&\r\n\t\t\t// Has children\r\n\t\t\tinfo.node.props.expanded &&\r\n\t\t\t// Is expanded\r\n\t\t\tdropPosition === 1 // On the bottom gap\r\n\t\t) {\r\n\t\t\tloop(data, dropKey, item => {\r\n\t\t\t\titem.children = item.children || []\r\n\t\t\t\t// where to insert. New item was inserted to the start of the array in this example, but can be anywhere\r\n\t\t\t\titem.children.unshift(dragObj)\r\n\t\t\t\t// in previous version, we use item.children.push(dragObj) to insert the\r\n\t\t\t\t// item to the tail of the children\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tlet ar = []\r\n\t\t\tlet i\r\n\t\t\tloop(data, dropKey, (_item, index, arr) => {\r\n\t\t\t\tar = arr\r\n\t\t\t\ti = index\r\n\t\t\t})\r\n\t\t\tif (dropPosition === -1) {\r\n\t\t\t\tar.splice(i, 0, dragObj)\r\n\t\t\t} else {\r\n\t\t\t\tar.splice(i + 1, 0, dragObj)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconsole.log('[before setGData]', data)\r\n\r\n\t\tsetGData(data)\r\n\t}\r\n\r\n\tconst { filedata, setFiledata } = useContext(FileContext)\r\n\tconsole.log('[Tree filedata]', gData, filedata)\r\n\r\n\t// функция заменяет текст выбранного файла при вводе в TextField\r\n\tfunction changeFileText(key, arrayData) {\r\n\t\tconst newtree = arrayData.map((item, i) => {\r\n\t\t\tif (item.children) {\r\n\t\t\t\titem.children = changeFileText(key, item.children)\r\n\t\t\t}\r\n\t\t\tif (item.key === key) {\r\n\t\t\t\t// заменить найденный текст\r\n\t\t\t\titem.text = filedata.text\r\n\t\t\t\tconsole.log('[fd]', filedata.key, key, filedata.text)\r\n\t\t\t\treturn item\r\n\t\t\t} else {\r\n\t\t\t\t// остальные не меняем, возвращаем как есть\r\n\t\t\t\treturn item\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn newtree\r\n\t}\r\n\r\n\tif (filedata.key != null) {\r\n\t\tconst newtree = changeFileText(filedata.key, gData)\r\n\t\tconsole.log('[newtree]', newtree)\r\n\t\t// setGData(newtree)\r\n\t}\r\n\r\n\tconst onSelect = (info, e) => {\r\n\t\tconsole.log('[NODE onSelect]', info, e, filedata)\r\n\t\tsetFiledata({ key: e.node.key, text: e.node.text })\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Tree\r\n\t\t\tclassName='draggable-tree'\r\n\t\t\tdefaultExpandedKeys={expandedKeys}\r\n\t\t\tdraggable\r\n\t\t\tblockNode\r\n\t\t\tonDragEnter={onDragEnter}\r\n\t\t\tonDrop={onDrop}\r\n\t\t\tonSelect={onSelect}\r\n\t\t\ttreeData={gData}\r\n\t\t/>\r\n\t)\r\n}\r\nexport default TreeFiles\r\n","import React, { useState } from 'react'\n\nimport './App.css'\nimport { Row, Col, Flex, Typography } from 'antd'\nimport { getIcon } from './helpers'\nimport { FileContext } from './FileContext.js' // контекст для хранения текста редактируемого файла\n\nimport TextField from './TextField'\nimport Controls from './Controls'\nimport TreeFiles from './Tree'\n\nconst { Title } = Typography\n\nfunction App({ appData, oldTree }) {\n\t// стартовые значения для хранения текста редактируемого файла\n\tconst initfile = {\n\t\tkey: null,\n\t\ttext: '',\n\t}\n\tconst [filedata, setFiledata] = useState(initfile)\n\n\t// функция добавления ключей для отображения дерева - при первом проходе\n\tconst levelData = (array, _level, _preKey) => {\n\t\tconst preKey = _preKey || '0'\n\t\tconst level = _level || '0'\n\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\tconst key = `${preKey}-${i}`\n\t\t\tarray[i].key = key\n\t\t\t// console.log('-', key, level)\n\t\t\tif (array[i].children.length > 0) {\n\t\t\t\tlevelData(array[i].children, level + 1, key)\n\t\t\t}\n\t\t}\n\t\treturn array\n\t}\n\n\t// Проверяем признак, есть ли структура файлов в localstorage. Если да - берем данные из storage,\n\t// нет - добавляем keys для дерева и сразу записываем в localstorage.\n\tconst treefiles = oldTree === 'no' ? levelData(appData) : JSON.parse(appData)\n\tif (oldTree === 'no') {\n\t\tlocalStorage.setItem('mytreedata', JSON.stringify(treefiles))\n\t\tlocalStorage.setItem('oldTree', 'yes')\n\t}\n\n\tconst [treedata, setTreeData] = useState(treefiles)\n\t// const [treedata, setTreeData] = useState(localStorage.getItem('mytreedata') ? JSON.parse(localStorage.getItem('mytreedata')) : treefiles)\n\t// if (oldTree === 'yes') {\n\t// \tconsole.log('-- oldTree yes --')\n\t// }\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Row gutter={16}>\n\t\t\t\t<Col span={14} offset={4}>\n\t\t\t\t\t<Title className='heading'>The Tree App</Title>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row gutter={16} className='m-top-5'>\n\t\t\t\t<FileContext.Provider value={{ filedata, setFiledata }}>\n\t\t\t\t\t<Col span={6} offset={4} className='block-bg'>\n\t\t\t\t\t\t<Flex vertical='true' justify='space-between'>\n\t\t\t\t\t\t\t<div className='h-tree'>\n\t\t\t\t\t\t\t\t<TreeFiles appData={treedata} filedata={filedata} className='text-field' />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t<Controls />\n\t\t\t\t\t\t</Flex>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col span={8} offset={0} className='block-bg'>\n\t\t\t\t\t\t<TextField />\n\t\t\t\t\t</Col>\n\t\t\t\t</FileContext.Provider>\n\t\t\t</Row>\n\t\t</div>\n\t)\n}\nexport default App\n\n// {getIcon('folder_opened')} {getIcon('arrow_side')} {getIcon('arrow_side')}\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport './index.css'\nimport App from './App'\n\n// Проверяем, есть ли структура дерева в localstorage\nif (localStorage.getItem('oldTree') === 'yes' && localStorage.getItem('mytreedata')) {\n\t// console.log('-- Old Tree --')\n\tconst root = ReactDOM.createRoot(document.getElementById('root'))\n\troot.render(\n\t\t<React.StrictMode>\n\t\t\t<App appData={localStorage.getItem('mytreedata')} oldTree='yes' appHello='Hello Old FileTree' />\n\t\t</React.StrictMode>\n\t)\n} else {\n\t// если в localstorage пусто, запрашиваем начальные данные\n\tfetch(`${process.env.PUBLIC_URL}/initial.json`)\n\t\t.then(r => r.json())\n\t\t.then(data => {\n\t\t\tconsole.log('-- New Tree --')\n\t\t\tconst root = ReactDOM.createRoot(document.getElementById('root'))\n\t\t\troot.render(\n\t\t\t\t<React.StrictMode>\n\t\t\t\t\t<App appData={data} oldTree='no' appHello='Hello New FileTree' />\n\t\t\t\t</React.StrictMode>\n\t\t\t)\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.log('[err reading file]', error)\n\t\t})\n}\n"],"sourceRoot":""}